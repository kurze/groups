name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  test:
    name: Test
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # rust: [stable, beta, nightly]
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-

      - name: Cache cargo tools
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-tarpaulin
            ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-tools-${{ hashFiles('.github/workflows/rust.yml') }}

      - name: Install tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          which cargo-tarpaulin || cargo install cargo-tarpaulin --locked
          which cargo-audit || cargo install cargo-audit --locked

      # Check formatting
      - name: Check formatting
        run: cargo fmt -- --check

      # Build
      - name: Build
        run: cargo build

      # Run tests
      - name: Run tests
        run: cargo test

      # Run doc tests
      - name: Run doc tests
        run: cargo test --doc

      # Clippy
      - name: Clippy
        run: cargo clippy --all-targets --all-features

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: cargo tarpaulin --out Xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run security audit
        if: matrix.os == 'ubuntu-latest'
        run: cargo audit