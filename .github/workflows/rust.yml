name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  packages: read

jobs:
  test:
    name: Test
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # rust: [stable, beta, nightly]
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-

      - name: Cache cargo tools
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-tarpaulin
            ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-tools-${{ hashFiles('.github/workflows/rust.yml') }}

      - name: Install tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          which cargo-tarpaulin || cargo install cargo-tarpaulin --locked
          which cargo-audit || cargo install cargo-audit --locked

      # Check formatting
      - name: Check formatting
        run: cargo fmt -- --check

      # Build
      - name: Build
        run: cargo build

      # Setup PostgreSQL for tests
      - name: Setup PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '18beta1'
          postgresql db: 'groups_test'
          postgresql user: 'groups_user'
          postgresql password: 'groups_password'

      # Run tests
      - name: Run tests
        env:
          DATABASE_TEST_URL: postgresql://groups_user:groups_password@localhost:5432/groups_test
        run: cargo test

      # Run doc tests
      - name: Run doc tests
        run: cargo test --doc

      # Clippy
      - name: Clippy
        run: cargo clippy --all-targets --all-features

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: cargo tarpaulin --out Xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run security audit
        if: matrix.os == 'ubuntu-latest'
        run: cargo audit

      # Setup Node.js for Playwright tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Install npm dependencies
      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      # Run Playwright tests
      - name: Run Playwright tests
        run: npm test

      # Upload test results
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Integration test with Docker image (only on main branch)
  integration-test:
    name: Integration Test with Docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start PostgreSQL for integration tests
        run: |
          docker run -d --name postgres-integration \
            -e POSTGRES_DB=groups_test \
            -e POSTGRES_USER=groups_user \
            -e POSTGRES_PASSWORD=groups_password \
            -p 5432:5432 \
            postgres:18beta1-alpine

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 30s bash -c 'until docker exec postgres-integration pg_isready -U groups_user -d groups_test; do sleep 1; done'

      - name: Test application with Docker image
        run: |
          # Pull the latest image built by the Docker workflow
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Check if the image exists (it should from the Docker build workflow)
          if docker manifest inspect "$IMAGE_TAG" >/dev/null 2>&1; then
            echo "✅ Using cached Docker image: $IMAGE_TAG"
            
            # Run the application container
            docker run -d --name groups-app \
              --link postgres-integration:postgres \
              -e DATABASE_URL="postgresql://groups_user:groups_password@postgres:5432/groups_test" \
              -e RUST_LOG=info \
              -e HOST=0.0.0.0 \
              -e PORT=8080 \
              -p 8080:8080 \
              "$IMAGE_TAG"
            
            # Wait for app to be ready
            timeout 30s bash -c 'until curl -f http://localhost:8080/ >/dev/null 2>&1; do sleep 1; done'
            
            # Basic health check
            curl -f http://localhost:8080/ || exit 1
            
            echo "✅ Integration test passed with Docker image"
          else
            echo "⚠️ Docker image not found, skipping integration test"
          fi

      - name: Cleanup
        if: always()
        run: |
          docker stop groups-app postgres-integration || true
          docker rm groups-app postgres-integration || true