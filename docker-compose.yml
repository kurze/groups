version: '3.8'

services:
  # Web application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: groups_app
    environment:
      DATABASE_URL: postgresql://groups_user:groups_password@postgres:5432/groups_dev
      RUST_LOG: info
      HOST: 0.0.0.0
      PORT: 8080
      SESSION_SECRET_KEY: production-secret-key-change-me-in-real-deployment
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - groups_network
    restart: unless-stopped
    profiles:
      - app

  postgres:
    image: postgres:18beta1-alpine
    container_name: groups_postgres
    environment:
      POSTGRES_DB: groups_dev
      POSTGRES_USER: groups_user
      POSTGRES_PASSWORD: groups_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U groups_user -d groups_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - groups_network

  postgres_test:
    image: postgres:18beta1-alpine
    container_name: groups_postgres_test
    environment:
      POSTGRES_DB: groups_test
      POSTGRES_USER: groups_user
      POSTGRES_PASSWORD: groups_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U groups_user -d groups_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - groups_network
    profiles:
      - test

volumes:
  postgres_data:

networks:
  groups_network:
    driver: bridge